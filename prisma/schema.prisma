// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

model User {
  id                     Int                  @id @default(autoincrement())
  email                  String               @unique
  password               String
  username               String               @unique @db.VarChar(30)
  name                   String?
  surname                String?
  isConfirmed            Boolean              @default(false)
  sentRequests           FriendshipRequest[]  @relation("Sender")
  receivedRequests       FriendshipRequest[]  @relation("Receiver")
  friendshipsInitiated   Friendship[]         @relation("Initiator")
  friendshipsReceived    Friendship[]         @relation("Receiver")
  debtsAsDebtor          Debt[]               @relation("Debtor")
  debtsAsCreditor        Debt[]               @relation("Creditor")
  debtRequestsAsDebtor   DebtRequest[]        @relation("Debtor")
  debtRequestsAsCreditor DebtRequest[]        @relation("Creditor")
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  DebtPaymentRequest     DebtPaymentRequest[] @relation("Debtor")
}

model Friendship {
  id     Int @id @default(autoincrement())
  userId Int
  friend Int

  initiator User     @relation("Initiator", fields: [userId], references: [id])
  receiver  User     @relation("Receiver", fields: [friend], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FriendshipRequest {
  id         Int           @id @default(autoincrement())
  senderId   Int
  receiverId Int
  status     RequestStatus @default(PENDING)
  sender     User          @relation("Sender", fields: [senderId], references: [id])
  receiver   User          @relation("Receiver", fields: [receiverId], references: [id])
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum Currency {
  AED // United Arab Emirates Dirham
  AFN // Afghan Afghani
  ALL // Albanian Lek
  AMD // Armenian Dram
  ANG // Netherlands Antillean Guilder
  AOA // Angolan Kwanza
  ARS // Argentine Peso
  AUD // Australian Dollar
  AWG // Aruban Florin
  AZN // Azerbaijani Manat
  BAM // Bosnia and Herzegovina Convertible Mark
  BBD // Barbadian Dollar
  BDT // Bangladeshi Taka
  BGN // Bulgarian Lev
  BHD // Bahraini Dinar
  BIF // Burundian Franc
  BMD // Bermudian Dollar
  BND // Brunei Dollar
  BOB // Bolivian Boliviano
  BRL // Brazilian Real
  BSD // Bahamian Dollar
  BTN // Bhutanese Ngultrum
  BWP // Botswana Pula
  BYN // Belarusian Ruble
  BZD // Belize Dollar
  CAD // Canadian Dollar
  CDF // Congolese Franc
  CHF // Swiss Franc
  CLP // Chilean Peso
  CNY // Chinese Yuan
  COP // Colombian Peso
  CRC // Costa Rican Colón
  CUP // Cuban Peso
  CVE // Cape Verdean Escudo
  CZK // Czech Koruna
  DJF // Djiboutian Franc
  DKK // Danish Krone
  DOP // Dominican Peso
  DZD // Algerian Dinar
  EGP // Egyptian Pound
  ERN // Eritrean Nakfa
  ETB // Ethiopian Birr
  EUR // Euro
  FJD // Fijian Dollar
  FKP // Falkland Islands Pound
  FOK // Faroese Króna
  GBP // British Pound Sterling
  GEL // Georgian Lari
  GGP // Guernsey Pound
  GHS // Ghanaian Cedi
  GIP // Gibraltar Pound
  GMD // Gambian Dalasi
  GNF // Guinean Franc
  GTQ // Guatemalan Quetzal
  GYD // Guyanese Dollar
  HKD // Hong Kong Dollar
  HNL // Honduran Lempira
  HRK // Croatian Kuna
  HTG // Haitian Gourde
  HUF // Hungarian Forint
  IDR // Indonesian Rupiah
  ILS // Israeli New Shekel
  IMP // Isle of Man Pound
  INR // Indian Rupee
  IQD // Iraqi Dinar
  IRR // Iranian Rial
  ISK // Icelandic Króna
  JEP // Jersey Pound
  JMD // Jamaican Dollar
  JOD // Jordanian Dinar
  JPY // Japanese Yen
  KES // Kenyan Shilling
  KGS // Kyrgyzstani Som
  KHR // Cambodian Riel
  KID // Kiribati Dollar
  KMF // Comorian Franc
  KRW // South Korean Won
  KWD // Kuwaiti Dinar
  KYD // Cayman Islands Dollar
  KZT // Kazakhstani Tenge
  LAK // Lao Kip
  LBP // Lebanese Pound
  LKR // Sri Lankan Rupee
  LRD // Liberian Dollar
  LSL // Lesotho Loti
  LYD // Libyan Dinar
  MAD // Moroccan Dirham
  MDL // Moldovan Leu
  MGA // Malagasy Ariary
  MKD // Macedonian Denar
  MMK // Myanmar Kyat
  MNT // Mongolian Tögrög
  MOP // Macanese Pataca
  MRU // Mauritanian Ouguiya
  MUR // Mauritian Rupee
  MVR // Maldivian Rufiyaa
  MWK // Malawian Kwacha
  MXN // Mexican Peso
  MYR // Malaysian Ringgit
  MZN // Mozambican Metical
  NAD // Namibian Dollar
  NGN // Nigerian Naira
  NIO // Nicaraguan Córdoba
  NOK // Norwegian Krone
  NPR // Nepalese Rupee
  NZD // New Zealand Dollar
  OMR // Omani Rial
  PAB // Panamanian Balboa
  PEN // Peruvian Sol
  PGK // Papua New Guinean Kina
  PHP // Philippine Peso
  PKR // Pakistani Rupee
  PLN // Polish Złoty
  PYG // Paraguayan Guaraní
  QAR // Qatari Riyal
  RON // Romanian Leu
  RSD // Serbian Dinar
  RUB // Russian Ruble
  RWF // Rwandan Franc
  SAR // Saudi Riyal
  SBD // Solomon Islands Dollar
  SCR // Seychellois Rupee
  SDG // Sudanese Pound
  SEK // Swedish Krona
  SGD // Singapore Dollar
  SHP // Saint Helena Pound
  SLL // Sierra Leonean Leone
  SOS // Somali Shilling
  SRD // Surinamese Dollar
  SSP // South Sudanese Pound
  STN // São Tomé and Príncipe Dobra
  SYP // Syrian Pound
  SZL // Eswatini Lilangeni
  THB // Thai Baht
  TJS // Tajikistani Somoni
  TMT // Turkmenistani Manat
  TND // Tunisian Dinar
  TOP // Tongan Paʻanga
  TRY // Turkish Lira
  TTD // Trinidad and Tobago Dollar
  TVD // Tuvaluan Dollar
  TWD // New Taiwan Dollar
  TZS // Tanzanian Shilling
  UAH // Ukrainian Hryvnia
  UGX // Ugandan Shilling
  USD // United States Dollar
  UYU // Uruguayan Peso
  UZS // Uzbekistani Som
  VES // Venezuelan Bolívar
  VND // Vietnamese Đồng
  VUV // Vanuatu Vatu
  WST // Samoan Tālā
  XAF // Central African CFA Franc
  XCD // East Caribbean Dollar
  XOF // West African CFA Franc
  XPF // CFP Franc
  YER // Yemeni Rial
  ZAR // South African Rand
  ZMW // Zambian Kwacha
  ZWL // Zimbabwean Dollar
}

model Debt {
  id                 Int                  @id @default(autoincrement())
  amount             Float
  title              String
  description        String               @db.VarChar(255)
  currency           Currency             @default(USD)
  debtorId           Int
  creditorId         Int
  isPaidInFull       Boolean              @default(false)
  debtor             User                 @relation("Debtor", fields: [debtorId], references: [id])
  creditor           User                 @relation("Creditor", fields: [creditorId], references: [id])
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  DebtPaymentRequest DebtPaymentRequest[]
}

model DebtRequest {
  id          Int      @id @default(autoincrement())
  amount      Float
  title       String
  description String   @db.VarChar(255)
  currency    Currency @default(USD)
  debtorId    Int
  creditorId  Int
  isAccepted  Boolean  @default(false)
  debtor      User     @relation("Debtor", fields: [debtorId], references: [id])
  creditor    User     @relation("Creditor", fields: [creditorId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model DebtPaymentRequest {
  id         Int      @id @default(autoincrement())
  amount     Float
  debtId     Int
  debtorId   Int
  isAccepted Boolean  @default(false)
  debtor     User     @relation("Debtor", fields: [debtorId], references: [id])
  debt       Debt     @relation(fields: [debtId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
