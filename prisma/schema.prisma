// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

model User {
  id                   Int                  @id @default(autoincrement())
  email                String               @unique
  username             String               @unique
  name                 String?
  surname              String?
  sentRequests         FriendshipRequest[]  @relation("Sender")
  receivedRequests     FriendshipRequest[]  @relation("Receiver")
  friendshipsInitiated Friendship[]         @relation("Initiator")
  friendshipsReceived  Friendship[]         @relation("Receiver")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Friendship {
  id          Int      @id @default(autoincrement())
  initiatorId Int
  receiverId  Int

  initiator   User     @relation("Initiator", fields: [initiatorId], references: [id])
  receiver    User     @relation("Receiver", fields: [receiverId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model FriendshipRequest {
  id         Int            @id @default(autoincrement())
  senderId   Int
  receiverId Int
  status     RequestStatus  @default(PENDING)
  sender     User           @relation("Sender", fields: [senderId], references: [id])
  receiver   User           @relation("Receiver", fields: [receiverId], references: [id])
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}
